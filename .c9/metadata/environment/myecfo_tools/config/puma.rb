{"filter":false,"title":"puma.rb","tooltip":"/myecfo_tools/config/puma.rb","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":19},"action":"remove","lines":["# Puma can serve each request in a thread from an internal thread pool.","# The `threads` method setting takes two numbers: a minimum and maximum.","# Any libraries that use thread pools should be configured to match","# the maximum value specified for Puma. Default is set to 5 threads for minimum","# and maximum; this matches the default thread size of Active Record.","#","threads_count = ENV.fetch(\"RAILS_MAX_THREADS\") { 5 }","threads threads_count, threads_count","","# Specifies the `port` that Puma will listen on to receive requests; default is 3000.","#","port        ENV.fetch(\"PORT\") { 3000 }","","# Specifies the `environment` that Puma will run in.","#","environment ENV.fetch(\"RAILS_ENV\") { \"development\" }","","# Specifies the number of `workers` to boot in clustered mode.","# Workers are forked webserver processes. If using threads and workers together","# the concurrency of the application would be max `threads` * `workers`.","# Workers do not work on JRuby or Windows (both of which do not support","# processes).","#","# workers ENV.fetch(\"WEB_CONCURRENCY\") { 2 }","","# Use the `preload_app!` method when specifying a `workers` number.","# This directive tells Puma to first boot the application and load code","# before forking the application. This takes advantage of Copy On Write","# process behavior so workers use less memory. If you use this option","# you need to make sure to reconnect any threads in the `on_worker_boot`","# block.","#","# preload_app!","","# If you are preloading your application and using Active Record, it's","# recommended that you close any connections to the database before workers","# are forked to prevent connection leakage.","#","# before_fork do","#   ActiveRecord::Base.connection_pool.disconnect! if defined?(ActiveRecord)","# end","","# The code in the `on_worker_boot` will be called if you are using","# clustered mode by specifying a number of `workers`. After each worker","# process is booted, this block will be run. If you are using the `preload_app!`","# option, you will want to use this block to reconnect to any threads","# or connections that may have been created at application boot, as Ruby","# cannot share connections between processes.","#","# on_worker_boot do","#   ActiveRecord::Base.establish_connection if defined?(ActiveRecord)","# end","#","","# Allow puma to be restarted by `rails restart` command.","plugin :tmp_restart"],"id":3},{"start":{"row":0,"column":0},"end":{"row":62,"column":3},"action":"insert","lines":["# Puma can serve each request in a thread from an internal thread pool.","# The `threads` method setting takes two numbers: a minimum and maximum.","# Any libraries that use thread pools should be configured to match","# the maximum value specified for Puma. Default is set to 5 threads for minimum","# and maximum; this matches the default thread size of Active Record.","#","threads_count = ENV.fetch(\"RAILS_MAX_THREADS\") { 5 }","threads threads_count, threads_count","","# Specifies the `port` that Puma will listen on to receive requests; default is 3000.","#","port        ENV.fetch(\"PORT\") { 3000 }","","# Specifies the `environment` that Puma will run in.","#","environment ENV.fetch(\"RAILS_ENV\") { \"development\" }","","# Specifies the number of `workers` to boot in clustered mode.","# Workers are forked webserver processes. If using threads and workers together","# the concurrency of the application would be max `threads` * `workers`.","# Workers do not work on JRuby or Windows (both of which do not support","# processes).","#","workers ENV.fetch(\"WEB_CONCURRENCY\") { 2 }","","# Use the `preload_app!` method when specifying a `workers` number.","# This directive tells Puma to first boot the application and load code","# before forking the application. This takes advantage of Copy On Write","# process behavior so workers use less memory. If you use this option","# you need to make sure to reconnect any threads in the `on_worker_boot`","# block.","#","preload_app!","","# If you are preloading your application and using Active Record, it's","# recommended that you close any connections to the database before workers","# are forked to prevent connection leakage.","#","# before_fork do","#   ActiveRecord::Base.connection_pool.disconnect! if defined?(ActiveRecord)","# end","","# The code in the `on_worker_boot` will be called if you are using","# clustered mode by specifying a number of `workers`. After each worker","# process is booted, this block will be run. If you are using the `preload_app!`","# option, you will want to use this block to reconnect to any threads","# or connections that may have been created at application boot, as Ruby","# cannot share connections between processes.","#","# on_worker_boot do","#   ActiveRecord::Base.establish_connection if defined?(ActiveRecord)","# end","#","","# Allow puma to be restarted by `rails restart` command.","plugin :tmp_restart","","on_worker_boot do","  # worker specific setup","  ActiveRecord::Base.establish_connection","","  Barnes.start","end"]}]]},"ace":{"folds":[],"scrolltop":12,"scrollleft":0,"selection":{"start":{"row":62,"column":3},"end":{"row":62,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1524785937298,"hash":"9c38bad8697b0b8dec943dcd1dfb14b6c2f44ea5"}